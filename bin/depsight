#!/usr/bin/env python3

# global
import argparse
import copy
from collections import OrderedDict
import yaml
import os
import re
import subprocess
import sys

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), ".."))
from lib import depends
from lib.logging import log


parser = argparse.ArgumentParser(description='')

parser.add_argument('file',
                    nargs='?',
                    help='The dependencies input file. Reads from STDIN when not file is set.')
parser.add_argument('--output',
                    nargs='?',
                    help='The output file. Outputs to temporary directory if unset.')
parser.add_argument('--mode',
                    nargs='?',
                    choices=["list", "draw"],
                    default="draw",
                    help='The output mode')
parser.add_argument('--format',
                    nargs='?',
                    choices=["pdf", "png", "svg"],
                    default="pdf",
                    help='The file format (drawing mode only)')
parser.add_argument('--engine',
                    nargs='?',
                    choices=["fdp", "dot"],
                    default="dot",
                    help='The graph engine (drawing mode only)')
parser.add_argument('--all', dest='all', action='store_const',
                    const=True, default=False,
                    help='Show all dependencies. Default: direct dependencies only. (list mode only)')
parser.add_argument('--verbose', dest='verbose', action='store_const',
                    const=True, default=False,
                    help='Verbose output (default: false)')
parser.add_argument('--include', dest='include_patterns',
                    action='append',
                    metavar='PATTERN',
                    help='Whitelist elements by name pattern. Start and end pattern with ^ and $ to get a full match. Can be used multiple times.')
parser.add_argument('--exclude', dest='exclude_patterns',
                    action='append',
                    metavar='PATTERN',
                    help='Blacklist elements by name pattern. Start and end pattern with ^ and $ to get a full match. Can be used multiple times.')
args = parser.parse_args()

def dicts(t): return {k: dicts(t[k]) for k in t}

def paths(t, path = [], level=0):
    ret =  []
    for key in t:
        ret.append(path + [key])
        ret += paths(t[key], path + [key], level+1)
    return ret

registered_dependencies = dict()
all_dependencies = dict()
direct_dependencies = dict()

include_patterns = args.include_patterns or []
if args.verbose:
    log("Compiling include patterns ...")
    log(include_patterns)
includes = [re.compile(pattern) for pattern in include_patterns]

exclude_patterns = args.exclude_patterns or []
if args.verbose:
    log("Compiling exclude patterns ...")
    log(exclude_patterns)
excludes = [re.compile(pattern) for pattern in exclude_patterns]

def included(module):
    if includes:
        is_included = False
        for include in includes:
            if include.search(module):
                is_included = True
    else:
        is_included = True

    if not is_included:
        return False

    for exclude in excludes:
        if exclude.search(module):
            return False
    return True

if args.verbose:
    log("Getting dependencies from files ...")
infile = open(args.file, 'r') if args.file else sys.stdin

with infile as stream:
    try:
        doc = yaml.load(stream)

        for module in filter(included, doc):
            name = module
            if doc[module]:
                dependencies = set(filter(included, doc[module]))
            else:
                dependencies = set()

            if args.verbose:
                log("{} depends on {}".format(name, dependencies))

            if not name in registered_dependencies:
                registered_dependencies[name] = set()
            registered_dependencies[name].update(dependencies)

    except yaml.YAMLError as exc:
        log(exc)

if args.verbose:
    log("resolving dependencies ...")

def cartinality(depdict):
    return sum([len(depdict[k]) for k in depdict])

# Get all_dependencies from registered_dependencies
def add_dependency():
    for key in all_dependencies:
        potentially_new_modules_for_key = None
        new_modules_for_key = None
        for currently_in in all_dependencies[key]:
            if currently_in in all_dependencies:
                potentially_new_modules_for_key = all_dependencies[currently_in] - set([key])
                if not potentially_new_modules_for_key <= all_dependencies[key]:
                    new_modules_for_key = potentially_new_modules_for_key.copy()
                    break
        if new_modules_for_key:
            all_dependencies[key] |= new_modules_for_key
            return

all_dependencies = copy.deepcopy(registered_dependencies)
direct_dependencies = copy.deepcopy(registered_dependencies)

# Sort
all_dependencies = OrderedDict(sorted(all_dependencies.items()))
direct_dependencies = OrderedDict(sorted(direct_dependencies.items()))

#print(direct_dependencies)

last_card = -1
while True:
    card = cartinality(all_dependencies)
    # print(card)
    if card == last_card:
        break
    last_card = card
    add_dependency()

def remove_indirect_dependencies():
    for mod in direct_dependencies:
        for one in direct_dependencies[mod]:
            others = direct_dependencies[mod] - set([one])
            for other in others:
                if depends.depends_on(other, one, direct_dependencies):
                    direct_dependencies[mod].remove(one)
                    return
                    # Go to next mod

last_card = -1
while True:
    card = cartinality(direct_dependencies)
    # print(card)
    if card == last_card:
        break
    last_card = card
    remove_indirect_dependencies()

def openfile(filepath):
    # pylint: disable=no-member
    # os.startfile is available on Windows only
    if sys.platform.startswith('linux'):
        subprocess.call(["xdg-open", filepath])
    elif sys.platform == "darwin":
        subprocess.call(["open", filepath])
    else:
        os.startfile(filepath)

if args.verbose:
    log("Done resolving dependencies.")

if args.mode == "list":
    if args.all:
        longest_name = max([len(d) for d in all_dependencies])
        for key in all_dependencies:
            print(key.ljust(longest_name) + " : " + ", ".join(sorted(all_dependencies[key])))
    else:
        longest_name = max([len(d) for d in direct_dependencies])
        for key in direct_dependencies:
            print(key.ljust(longest_name) + " : " + ", ".join(sorted(direct_dependencies[key])))

if args.mode == "draw":
    import graphviz
    import tempfile

    tmpdir = tempfile.mkdtemp(prefix="depsight-")

    g2 = graphviz.Digraph(format=args.format, engine=args.engine)
    g2.attr('graph', rankdir='RL') # draw left to right
    for key in direct_dependencies:
        g2.node(key)
        for dep in direct_dependencies[key]:
            g2.edge(key, dep)

    if args.verbose:
        log("Rendering graph ...")
    filename = g2.render(
        directory=tmpdir, # working directory for graphviz
        filename='graph', # temporary file with graph information
    )

    if args.output:
        if args.verbose:
            log("Moving {} to {} ...".format(filename, args.output))
        os.rename(filename, args.output)
    else:
        if args.verbose:
            log("Opening {} ...".format(filename))
        openfile(filename)
